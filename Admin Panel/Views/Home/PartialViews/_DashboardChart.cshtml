@model Entities.MainModels.HomeModel




<div class="card">
    <div class="card-header header-elements-inline">
        <h5 class="card-title" id="lbl_dashboard_lifeTimeStatistic">Life Time Statistics </h5>
        <div class="header-elements">
            <div class="list-icons">
                <a class="list-icons-item" data-action="collapse"></a>

            </div>
        </div>
    </div>

    <div class="card-body py-0">
        <div class="row">
            <div class="col-sm-12 col-md-3 col-lg-3">

                <div class="total-orders-dashboard mb-4">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <a href="#" class="btn bg-transparent border-teal text-teal rounded-round border-2 btn-icon mr-3">
                            <i class="icon-cart2"></i>
                        </a>
                        <div>
                            <div class="font-weight-semibold" id="lbl_dash_total_orders">Total Orders</div>
                            <span class="text-muted">@(Model?.dashboardLifeTimeStatistics?.TotalOrders ?? 0)</span>

                        </div>


                    </div>


                </div>


            </div>

            <div class="col-sm-12 col-md-3 col-lg-3">

                <div class="total-products-dashboard  mb-4">

                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <a href="#" class="btn bg-transparent border-indigo-400 text-indigo-400  rounded-round border-2 btn-icon mr-3">
                            <i class="icon-list-unordered"></i>
                        </a>
                        <div>
                            <div class="font-weight-semibold" id="lbl_dash_total_products">Total Products</div>
                            <span class="text-muted">@(Model?.dashboardLifeTimeStatistics?.TotalProducts ?? 0)</span>
                        </div>
                    </div>

                </div>


            </div>

            <div class="col-sm-12 col-md-3 col-lg-3">

                <div class="total-users-dashboard  mb-4">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <a href="#" class="btn bg-transparent border-warning-400 text-warning-400  rounded-round border-2 btn-icon mr-3">
                            <i class="icon-people"></i>
                        </a>
                        <div>
                            <div class="font-weight-semibold" id="lbl_dash_total_users">Total Users</div>
                            <span class="text-muted"><span class="badge badge-mark border-success mr-2"></span> @(Model?.dashboardLifeTimeStatistics?.TotalUsers ?? 0)</span>
                        </div>
                    </div>


                </div>


            </div>

            <div class="col-sm-12 col-md-3 col-lg-3">


                <div class="total-income-dashboard  mb-4">
                    <div class="d-flex align-items-center justify-content-center mb-2">
                        <a href="#" class="btn bg-transparent border-primary-400 text-primary-400 rounded-round border-2 btn-icon mr-3">
                            <i class="fas fa-dollar-sign"></i>
                        </a>
                        <div>
                            <div class="font-weight-semibold" id="lbl_dash_total_income">Total Income</div>
                            <span class="text-muted">@(CommonConversionHelper.GetDefaultCurrencySymbol())@(Model?.dashboardLifeTimeStatistics?.TotalIncome ?? 0)</span>
                        </div>
                    </div>


                </div>



            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="card">
            <div class="card-header header-elements-inline">
                <h5 class="card-title" id="lbl_dash_monthly_sales">Monthly Sales </h5>
                <div class="header-elements">

                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>

                    </div>
                </div>
            </div>

            <div class="card-body py-0">
                <div>
                    <div id="home_sales_chart" class="home-chart-size">
                    </div>

                </div>

            </div>
        </div>
    </div>

    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="card">
            <div class="card-header header-elements-inline">
                <h5 class="card-title" id="lbl_dash_monthy_revenue">Monthly Revenue </h5>
                <div class="header-elements">

                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>

                    </div>
                </div>
            </div>

            <div class="card-body py-0">
                <div>
                    <div id="home_orders_per_month_chart" class="home-chart-size">
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



<div class="card">
    <div class="card-header header-elements-inline">
        <h5 class="card-title" id="lbl_dash_popular_categories_sale">Popular Categories Sales </h5>
        <div class="header-elements">

            <div class="list-icons">
                <a class="list-icons-item" data-action="collapse"></a>

            </div>
        </div>
    </div>

    <div class="card-body py-0">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div id="home_popular_categories_sales_chart" class="home-chart-size">
                </div>
            </div>


        </div>

    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="card">
            <div class="card-header header-elements-inline">
                <h5 class="card-title" id="lbl_dash_customer_location">Customers Location </h5>
                <div class="header-elements">

                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>

                    </div>
                </div>
            </div>

            <div class="card-body py-0">
                <div>
                    <div id="home_customer_location_chart" class="home-chart-size">
                    </div>

                </div>

            </div>
        </div>
    </div>

    <div class="col-lg-6 col-md-6 col-sm-12">
        <div class="card">
            <div class="card-header header-elements-inline">
                <h5 class="card-title" id="lbl_dash_popular_products_sales">Popular Products Sales </h5>
                <div class="header-elements">

                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>

                    </div>
                </div>
            </div>

            <div class="card-body py-0">
                <div>
                    <div id="home_popular_products_chart" class="home-chart-size">
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



<script>

    $(document).ready(function() {
        setChartSalesPerMonth();
        setChartOrderRevenuePerMonth();
        setChartSalesPopularCategories();
        setChartCustomersLocationWise();
        setChartPopularProducts();
    });



    function setChartSalesPerMonth() {

        try {
            am4core.ready(function() {

                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                //Hide logo begin
                am4core.addLicense("ch-custom-attribution");
                //Hide logo end

                // Create chart instance
                var chartSale = am4core.create("home_sales_chart", am4charts.XYChart);
                chartSale.scrollbarX = new am4core.Scrollbar();

                // ✅ Chart data parsing area starts here
                let saleModelList = '@Html.Raw(JsonConvert.SerializeObject(Model?.SalesPerMonthData ?? new List<Entities.CommonModels.HomeModule.TwoDimensionChart>()))';
                let chartSaleData = JSON.parse(saleModelList);

                // Add data
                for (i = 0; i < chartSaleData.length; i++) {
                    chartSale.data.push({
                        month: chartSaleData[i].ChartLabel,
                        totalsale: chartSaleData[i].ChartValue
                    });
                }
                // ✅ Chart data parsing area ends here



                // Create axes
                var categoryAxis = chartSale.xAxes.push(new am4charts.CategoryAxis());
                categoryAxis.dataFields.category = "month";
                categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.renderer.minGridDistance = 30;
                categoryAxis.renderer.labels.template.horizontalCenter = "right";
                categoryAxis.renderer.labels.template.verticalCenter = "middle";
                categoryAxis.renderer.labels.template.rotation = 270;
                categoryAxis.tooltip.disabled = true;
                categoryAxis.renderer.minHeight = 110;

                var valueAxis = chartSale.yAxes.push(new am4charts.ValueAxis());
                valueAxis.renderer.minWidth = 50;

                // Create series
                var series = chartSale.series.push(new am4charts.ColumnSeries());
                series.sequencedInterpolation = true;
                series.dataFields.valueY = "totalsale";
                series.dataFields.categoryX = "month";
                series.tooltipText = "[{categoryX}: bold]{valueY}[/]";
                series.columns.template.strokeWidth = 0;

                series.tooltip.pointerOrientation = "vertical";

                series.columns.template.column.cornerRadiusTopLeft = 10;
                series.columns.template.column.cornerRadiusTopRight = 10;
                series.columns.template.column.fillOpacity = 0.8;

                // on hover, make corner radiuses bigger
                var hoverState = series.columns.template.column.states.create("hover");
                hoverState.properties.cornerRadiusTopLeft = 0;
                hoverState.properties.cornerRadiusTopRight = 0;
                hoverState.properties.fillOpacity = 1;

                series.columns.template.adapter.add("fill", function(fill, target) {
                    return chartSale.colors.getIndex(target.dataItem.index);
                });

                // Cursor
                chartSale.cursor = new am4charts.XYCursor();

            }); // end am4core.ready()
        }
        catch (err) {
            console.log(err);
        }

    }

    function setChartOrderRevenuePerMonth() {

        try {
            am4core.ready(function() {

                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                //Hide logo begin
                am4core.addLicense("ch-custom-attribution");
                //Hide logo end

                // Create chart instance
                var chartOrder = am4core.create("home_orders_per_month_chart", am4charts.XYChart);
                chartOrder.scrollbarX = new am4core.Scrollbar();


                // ✅ Chart data parsing area starts here
                let orderModelList = '@Html.Raw(JsonConvert.SerializeObject(Model?.OrderRevenuePerMonth ?? new List<Entities.CommonModels.HomeModule.TwoDimensionChart>()))';
                let chartOrderData = JSON.parse(orderModelList);

                // Add data
                for (i = 0; i < chartOrderData.length; i++) {
                    chartOrder.data.push({
                        month: chartOrderData[i].ChartLabel,
                        total_revenue: chartOrderData[i].ChartValue
                    });
                }
                // ✅ Chart data parsing area ends here



                // Create axes
                var categoryAxis = chartOrder.xAxes.push(new am4charts.CategoryAxis());
                categoryAxis.dataFields.category = "month";
                categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.renderer.minGridDistance = 30;
                categoryAxis.renderer.labels.template.horizontalCenter = "right";
                categoryAxis.renderer.labels.template.verticalCenter = "middle";
                categoryAxis.renderer.labels.template.rotation = 270;
                categoryAxis.tooltip.disabled = true;
                categoryAxis.renderer.minHeight = 110;

                var valueAxis = chartOrder.yAxes.push(new am4charts.ValueAxis());
                valueAxis.renderer.minWidth = 50;

                // Create series
                var series = chartOrder.series.push(new am4charts.ColumnSeries());
                series.sequencedInterpolation = true;
                series.dataFields.valueY = "total_revenue";
                series.dataFields.categoryX = "month";
                series.tooltipText = "[{categoryX}: bold]{valueY}[/]";
                series.columns.template.strokeWidth = 0;

                series.tooltip.pointerOrientation = "vertical";

                series.columns.template.column.cornerRadiusTopLeft = 10;
                series.columns.template.column.cornerRadiusTopRight = 10;
                series.columns.template.column.fillOpacity = 0.8;

                // on hover, make corner radiuses bigger
                var hoverState = series.columns.template.column.states.create("hover");
                hoverState.properties.cornerRadiusTopLeft = 0;
                hoverState.properties.cornerRadiusTopRight = 0;
                hoverState.properties.fillOpacity = 1;

                series.columns.template.adapter.add("fill", function(fill, target) {
                    return chartOrder.colors.getIndex(target.dataItem.index);
                });

                // Cursor
                chartOrder.cursor = new am4charts.XYCursor();

            }); // end am4core.ready()
        }
        catch (err) {
            console.log(err);
        }

    }

    function setChartSalesPopularCategories() {

        try {
            am4core.ready(function() {

                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                //Hide logo begin
                am4core.addLicense("ch-custom-attribution");
                //Hide logo end

                var chartCategoriesSales = am4core.create("home_popular_categories_sales_chart", am4charts.XYChart);

                // some extra padding for range labels
                chartCategoriesSales.paddingBottom = 50;

                chartCategoriesSales.cursor = new am4charts.XYCursor();
                chartCategoriesSales.scrollbarX = new am4core.Scrollbar();

                // will use this to store colors of the same items
                var colors = {};

                var categoryAxis = chartCategoriesSales.xAxes.push(new am4charts.CategoryAxis());
                categoryAxis.dataFields.category = "category";
                categoryAxis.renderer.minGridDistance = 60;
                categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.dataItems.template.text = "{realName}";
                categoryAxis.adapter.add("tooltipText", function(tooltipText, target) {
                    return categoryAxis.tooltipDataItem.dataContext.realName;
                })

                var valueAxis = chartCategoriesSales.yAxes.push(new am4charts.ValueAxis());
                valueAxis.tooltip.disabled = true;
                valueAxis.min = 0;

                // single column series for all data
                var columnSeries = chartCategoriesSales.series.push(new am4charts.ColumnSeries());
                columnSeries.columns.template.width = am4core.percent(80);
                columnSeries.tooltipText = "{provider}: {realName}, {valueY}";
                columnSeries.dataFields.categoryX = "category";
                columnSeries.dataFields.valueY = "value";

                // second value axis for quantity
                var valueAxis2 = chartCategoriesSales.yAxes.push(new am4charts.ValueAxis());
                valueAxis2.renderer.opposite = true;
                valueAxis2.syncWithAxis = valueAxis;
                valueAxis2.tooltip.disabled = true;

                // quantity line series
                var lineSeries = chartCategoriesSales.series.push(new am4charts.LineSeries());
                lineSeries.tooltipText = "{valueY}";
                lineSeries.dataFields.categoryX = "category";
                lineSeries.dataFields.valueY = "quantity";
                lineSeries.yAxis = valueAxis2;
                lineSeries.bullets.push(new am4charts.CircleBullet());
                lineSeries.stroke = chartCategoriesSales.colors.getIndex(13);
                lineSeries.fill = lineSeries.stroke;
                lineSeries.strokeWidth = 2;
                lineSeries.snapTooltip = true;

                // when data validated, adjust location of data item based on count
                lineSeries.events.on("datavalidated", function() {
                    lineSeries.dataItems.each(function(dataItem) {
                        // if count divides by two, location is 0 (on the grid)
                        if (dataItem.dataContext.count / 2 == Math.round(dataItem.dataContext.count / 2)) {
                            dataItem.setLocation("categoryX", 0);
                        }
                        // otherwise location is 0.5 (middle)
                        else {
                            dataItem.setLocation("categoryX", 0.5);
                        }
                    })
                })

                // fill adapter, here we save color value to colors object so that each time the item has the same name, the same color is used
                columnSeries.columns.template.adapter.add("fill", function(fill, target) {
                    var name = target.dataItem.dataContext.realName;
                    if (!colors[name]) {
                        colors[name] = chartCategoriesSales.colors.next();
                    }
                    target.stroke = colors[name];
                    return colors[name];
                })


                var rangeTemplate = categoryAxis.axisRanges.template;
                rangeTemplate.tick.disabled = false;
                rangeTemplate.tick.location = 0;
                rangeTemplate.tick.strokeOpacity = 0.6;
                rangeTemplate.tick.length = 60;
                rangeTemplate.grid.strokeOpacity = 0.5;
                rangeTemplate.label.tooltip = new am4core.Tooltip();
                rangeTemplate.label.tooltip.dy = -10;
                rangeTemplate.label.cloneTooltip = false;

                ///// DATA
                var chartData = [];
                var lineSeriesData = [];


                // ✅ Chart data parsing area starts here
                let popularCategoriesModel = '@Html.Raw(JsonConvert.SerializeObject(Model?.distinctPopularCategoriesChartDic ?? new Dictionary<string, object>()))';
                let chartPopularCategoriesData = JSON.parse(popularCategoriesModel);
                // ✅ Chart data parsing area ends here


                //var data =
                //{
                //    "Category 1": {
                //        "item 1": 10,
                //        "item 2": 35,
                //        "item 3": 5,
                //        "item 4": 20,
                //        "quantity": 70
                //    },
                //    "Category 2": {
                //        "item 1": 15,
                //        "item 3": 21,
                //        "quantity": 36
                //    }
                //}

                // process data ant prepare it for the chart
                for (var providerName in chartPopularCategoriesData) {
                    var providerData = chartPopularCategoriesData[providerName];

                    // add data of one provider to temp array
                    var tempArray = [];
                    var count = 0;
                    // add items
                    for (var itemName in providerData) {
                        if (itemName != "quantity") {
                            count++;
                            // we generate unique category for each column (providerName + "_" + itemName) and store realName
                            tempArray.push({ category: providerName + "_" + itemName, realName: itemName, value: providerData[itemName], provider: providerName })
                        }
                    }
                    // sort temp array
                    tempArray.sort(function(a, b) {
                        if (a.value > b.value) {
                            return 1;
                        }
                        else if (a.value < b.value) {
                            return -1
                        }
                        else {
                            return 0;
                        }
                    })

                    // add quantity and count to middle data item (line series uses it)
                    var lineSeriesDataIndex = Math.floor(count / 2);
                    tempArray[lineSeriesDataIndex].quantity = providerData.quantity;
                    tempArray[lineSeriesDataIndex].count = count;
                    // push to the final data
                    am4core.array.each(tempArray, function(item) {
                        chartData.push(item);
                    })

                    // create range (the additional label at the bottom)
                    var range = categoryAxis.axisRanges.create();
                    range.category = tempArray[0].category;
                    range.endCategory = tempArray[tempArray.length - 1].category;
                    range.label.text = tempArray[0].provider;
                    range.label.dy = 30;
                    range.label.truncate = true;
                    range.label.fontWeight = "bold";
                    range.label.tooltipText = tempArray[0].provider;

                    range.label.adapter.add("maxWidth", function(maxWidth, target) {
                        var range = target.dataItem;
                        var startPosition = categoryAxis.categoryToPosition(range.category, 0);
                        var endPosition = categoryAxis.categoryToPosition(range.endCategory, 1);
                        var startX = categoryAxis.positionToCoordinate(startPosition);
                        var endX = categoryAxis.positionToCoordinate(endPosition);
                        return endX - startX;
                    })
                }

                chartCategoriesSales.data = chartData;


                // last tick
                var range = categoryAxis.axisRanges.create();
                range.category = chartCategoriesSales.data[chartCategoriesSales.data.length - 1].category;
                range.label.disabled = true;
                range.tick.location = 1;
                range.grid.location = 1;

            }); // end am4core.ready()
        }
        catch (err) {
            console.log(err);
        }

    }

    function setChartCustomersLocationWise() {

        try {
            am4core.ready(function() {

                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                //Hide logo begin
                am4core.addLicense("ch-custom-attribution");
                //Hide logo end

                // Create chart instance
                var chartCustomer = am4core.create("home_customer_location_chart", am4charts.PieChart);



                // ✅ Chart data parsing area starts here
                let orderModelList = '@Html.Raw(JsonConvert.SerializeObject(Model?.CustomersLocationWiseData ?? new List<Entities.CommonModels.HomeModule.TwoDimensionChart>()))';
                let chartOrderData = JSON.parse(orderModelList);

                // Add data
                for (i = 0; i < chartOrderData.length; i++) {
                    chartCustomer.data.push({
                        country: chartOrderData[i].ChartLabel,
                        customers: chartOrderData[i].ChartValue
                    });
                }
                // ✅ Chart data parsing area ends here


                // Add and configure Series
                var pieSeries = chartCustomer.series.push(new am4charts.PieSeries());
                pieSeries.dataFields.value = "customers";
                pieSeries.dataFields.category = "country";
                pieSeries.slices.template.stroke = am4core.color("#fff");
                pieSeries.slices.template.strokeOpacity = 1;

                // This creates initial animation
                pieSeries.hiddenState.properties.opacity = 1;
                pieSeries.hiddenState.properties.endAngle = -90;
                pieSeries.hiddenState.properties.startAngle = -90;

                // To avoid not to cut the labels if width is less. By default it is 80
                chartCustomer.radius = am4core.percent(55);


                chartCustomer.hiddenState.properties.radius = am4core.percent(0);


            }); // end am4core.ready()

        }
        catch (err) {
            console.log(err);
        }

    }

    function setChartPopularProducts() {
        try {
            am4core.ready(function() {

                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                //Hide logo begin
                am4core.addLicense("ch-custom-attribution");
                //Hide logo end

                var chartPopularProducts = am4core.create("home_popular_products_chart", am4charts.XYChart);


                // ✅ Chart data parsing area starts here
                let popularProductModelList = '@Html.Raw(JsonConvert.SerializeObject(Model?.PopularProductsData ?? new List<Entities.CommonModels.HomeModule.TwoDimensionChart>()))';
                let chartPopularProductData = JSON.parse(popularProductModelList);

                // Add data
                for (i = 0; i < chartPopularProductData.length; i++) {
                    chartPopularProducts.data.push({
                        product: chartPopularProductData[i].ChartLabel,
                        popularity: chartPopularProductData[i].ChartValue
                    });
                }
                // ✅ Chart data parsing area ends here



                // chartPopularProducts.data = data;
                var categoryAxis = chartPopularProducts.xAxes.push(new am4charts.CategoryAxis());
                categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.dataFields.category = "product";
                categoryAxis.renderer.minGridDistance = 15;
                categoryAxis.renderer.grid.template.location = 0.5;
                categoryAxis.renderer.grid.template.strokeDasharray = "1,3";
                categoryAxis.renderer.labels.template.rotation = -90;
                categoryAxis.renderer.labels.template.horizontalCenter = "left";
                categoryAxis.renderer.labels.template.location = 0.5;

                categoryAxis.renderer.labels.template.adapter.add("dx", function(dx, target) {
                    return -target.maxRight / 2;
                })

                var valueAxis = chartPopularProducts.yAxes.push(new am4charts.ValueAxis());
                valueAxis.tooltip.disabled = true;
                valueAxis.renderer.ticks.template.disabled = true;
                valueAxis.renderer.axisFills.template.disabled = true;

                var series = chartPopularProducts.series.push(new am4charts.ColumnSeries());
                series.dataFields.categoryX = "product";
                series.dataFields.valueY = "popularity";
                series.tooltipText = "{valueY.value}";
                series.sequencedInterpolation = true;
                series.fillOpacity = 0;
                series.strokeOpacity = 1;
                series.strokeDashArray = "1,3";
                series.columns.template.width = 0.01;
                series.tooltip.pointerOrientation = "horizontal";

                var bullet = series.bullets.create(am4charts.CircleBullet);

                chartPopularProducts.cursor = new am4charts.XYCursor();

                chartPopularProducts.scrollbarX = new am4core.Scrollbar();
                chartPopularProducts.scrollbarY = new am4core.Scrollbar();


            }); // end am4core.ready()
        }
        catch (err) {
            console.log(err);
        }

    }


</script>

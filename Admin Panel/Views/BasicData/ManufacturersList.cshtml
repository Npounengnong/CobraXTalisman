@model Entities.MainModels.BasicDataModel

@{
    #region page basic info
    ViewData["Title"] = Model?.PageBasicInfoObj?.PageTitle ?? "";
    ViewData["EntityId"] = Model?.PageBasicInfoObj?.EntityId ?? 0;
     
    #endregion
}

@{
    List<SelectListItem> ActiveInactiveStatus = new List<SelectListItem>();
    ActiveInactiveStatus.Add(new SelectListItem { Value = "true", Text = "Active" });
    ActiveInactiveStatus.Add(new SelectListItem { Value = "false", Text = "In Active" });

     Dictionary<string, string>? IsActiveDropDown = new Dictionary<string, string>();
     IsActiveDropDown = ActiveInactiveStatus.ToDictionary(v => v.Value, t => t.Text);


}

<!-- Page header -->
@{
    PageHeader pageHeader = new PageHeader
            {
                EntityId = Model?.PageBasicInfoObj != null ? Model.PageBasicInfoObj.EntityId : 0,
                PageTitle = Model?.PageBasicInfoObj?.PageTitle ?? "Page Info",
                ShowAddNewButton = true,
                ShowActionsButton = true,
                ShowExportToPdfButton = false,
                ShowExportToExcelButton = true,
                DataExportUrl = Url.Action("ManufacturersList", "BasicData", new { langCode = Model?.PageBasicInfoObj?.langCode })
            };

}
@await Html.PartialAsync("~/Views/Common/_PageHeader.cshtml", pageHeader)
<!-- /page header -->



<div class="content">


    <!-- Error Area -->
    <div id="error-messages-area">
        @{
            SuccessErrorMsgEntity? successErrorMsgEntity = new SuccessErrorMsgEntity();
            successErrorMsgEntity = Model.SuccessErrorMsgEntityObj == null ? new SuccessErrorMsgEntity() : Model.SuccessErrorMsgEntityObj;
        }
            
        @await Html.PartialAsync("~/Views/Common/_SuccessErrorMsg.cshtml", successErrorMsgEntity)
    </div>
    <!-- /Error Area -->
     <!-- Search Area Starts Here -->
    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageSearchTitle.cshtml")
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <!-- Page search form -->
            @{
                SearchFilterModel filter = new SearchFilterModel();

                #region basic settings
                filter.SearchJSFunctionName = "SearchRecord();";
                filter.SearchButtonType = "button";
                filter.EntityId = Model?.PageBasicInfoObj?.EntityId ?? 0;
                filter.SearchURL = Url.Action("ManufacturersList", "BasicData", new { langCode = Model?.PageBasicInfoObj?.langCode });
                #endregion

                filter.SearchFilterEntityList = new List<HtmlFormFieldsEntity>()
            {
            new HtmlFormFieldsEntity(){ FieldID = "ManufacturerId", FieldName="ManufacturerId",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Manufacturer Id", LabelText="Manufacturer Id", ToolTipText="Enter here the Manufacturer Id", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "Name", FieldName="Name",  FieldTypeID = (short)HTMLFieldTypeEnums.Search, PlaceHolderText="Manufacturer Name", LabelText="Manufacturer Name", ToolTipText="Enter here Manufacturer name", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "FromDate", FieldName="FromDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="From Date", LabelText="From Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "ToDate", FieldName="ToDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="To Date", LabelText="To Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},

            };
            }

            @await Html.PartialAsync("~/Views/Common/_SearchFilter.cshtml", filter)
            <!-- /page search form -->


        </div>
    </div>
      <!-- Search Area Ends Here -->
   
    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageGridTitle.cshtml", Model?.PageBasicInfoObj)
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-lg-12 col-md-12">

                    <div class="table-responsive" id="main_data_table">
                        @await Html.PartialAsync("~/Views/BasicData/PartialViews/_ManufacturersList.cshtml", Model)
                    </div>

                </div>
            </div>


        </div>
    </div>
   
    <!-- Modals area Insert starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityInsert = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityInsert.ModalTitle = "Add Manufacturer";
        htmlBootstrapModalEntityInsert.ModalDivId = "AddNewDataModal";
        htmlBootstrapModalEntityInsert.SubmitBtnJsFunctionName = "SaveFormRecord();";
        htmlBootstrapModalEntityInsert.SubmitButtonText = "Save";
        htmlBootstrapModalEntityInsert.FormId = "data-insert-common-form";
        htmlBootstrapModalEntityInsert.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;

       

        htmlBootstrapModalEntityInsert.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {
    new HtmlFormFieldsEntity(){ FieldID = "NameInsert", FieldName="NameInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Manufacturer Name", LabelText="Manufacturer Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "IsActiveInsert", FieldName="IsActiveInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select Status", LabelText="Is Active", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IsActiveDropDown},
    new HtmlFormFieldsEntity(){ FieldID = "DisplaySeqNoInsert", FieldName="DisplaySeqNoInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Display Seq No", LabelText="Display Seq No"},

    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityInsert)

    <!-- /Modals area Insert ends here-->


    <!-- Modals area Edit starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityEdit = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityEdit.ModalTitle = "Update Manufacturer";
        htmlBootstrapModalEntityEdit.ModalDivId = "EditDataModal";
        htmlBootstrapModalEntityEdit.SubmitBtnJsFunctionName = "UpdateFormRecord();";
        htmlBootstrapModalEntityEdit.SubmitButtonText = "Update";
        htmlBootstrapModalEntityEdit.FormId = "data-edit-common-form";
        htmlBootstrapModalEntityEdit.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;

       
        htmlBootstrapModalEntityEdit.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {
   new HtmlFormFieldsEntity(){ FieldID = "NameUpdate", FieldName="NameUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Manufacturer Name", LabelText="Manufacturer Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "IsActiveUpdate", FieldName="IsActiveUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select Status", LabelText="Is Active", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IsActiveDropDown},
    new HtmlFormFieldsEntity(){ FieldID = "DisplaySeqNoUpdate", FieldName="DisplaySeqNoUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Display Seq No", LabelText="Display Seq No"},

    new HtmlFormFieldsEntity(){ FieldID = "ManufacturerIdUpdate", FieldName="ManufacturerIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Hidden},

    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityEdit)

    <!-- /Modals area Edit ends here-->



</div>
@section  Scripts{

<script>

       function SaveFormRecord(){

          $("#data-insert-common-form").submit(function (e) {
               e.preventDefault();
           });

           if (!$("#data-insert-common-form").valid()) {
                  event.preventDefault();
               return false;
           }


            let Name =  $('#NameInsert').val();
            let IsActive =$('#IsActiveInsert').val();
            let DisplaySeqNo =$('#DisplaySeqNoInsert').val();

          if(!checkIfStringIsEmtpy(Name)){
               showSuccessErrorMsg("error", "Error", "Please fill name field!");
               return false;
           }

          if(!checkIfStringIsEmtpy(IsActive)){
               showSuccessErrorMsg("error", "Error", "Please fill status field!");
               return false;
           }


            //--make form data
           var formDate = {
                Name:Name,
                IsActive:IsActive,
                DisplaySeqNo:DisplaySeqNo,
                DataOperationType: '@((short)DataOperationType.Insert)'
            }

            let saveUrl = "@Url.Action("SaveUpdateManufacturer", "BasicData" , new { langCode = Model?.PageBasicInfoObj?.langCode })";
             $.ajax({
                   type: "POST",
                   url: saveUrl,
                   data: formDate,
                   // datatype: "json",
                   cache: false,
                   async: false,

                   success: function (data) {
                        console.log(data);
                        if (data.success) {
                        showSuccessErrorMsg("success", "Success", "Saved Successfully!");
                        setTimeout(function () {
                          location.reload();
                        }, 1000);
                        } else {
                        showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                        }

                   },
                   error: function (xhr, ajaxOptions, thrownError) {
                      showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");
                   }
               })

    }

           function UpdateFormRecord(){

               $("#data-edit-common-form").submit(function (e) {
                    e.preventDefault();
                });

                if (!$("#data-edit-common-form").valid()) {
                     event.preventDefault();
                    return false;
                }

                let ManufacturerId =  $('#ManufacturerIdUpdate').val();
                let Name =  $('#NameUpdate').val();
                let IsActive =$('#IsActiveUpdate').val();
                let DisplaySeqNo =$('#DisplaySeqNoUpdate').val();

              if(!checkIfStringIsEmtpy(Name)){
                   showSuccessErrorMsg("error", "Error", "Please fill color and hex code fields!");
                   return false;
               }

              if(!checkIfStringIsEmtpy(IsActive)){
                   showSuccessErrorMsg("error", "Error", "Please fill status field!");
                   return false;
               }

                if(!checkIfStringIsEmtpy(ManufacturerId)){
                   showSuccessErrorMsg("error", "Error", "Manufacturer Id is null!");
                   return false;
               }


                //--make form data
               var formDate = {
                    ManufacturerId:ManufacturerId,
                    Name:Name,
                    IsActive:IsActive,
                    DisplaySeqNo:DisplaySeqNo,
                    DataOperationType: '@((short)DataOperationType.Update)'
                }


            let saveUrl = "@Url.Action("SaveUpdateManufacturer", "BasicData" , new { langCode = Model?.PageBasicInfoObj?.langCode })";
                  $.ajax({
                        type: "POST",
                        url: saveUrl,
                        data: formDate,
                        // datatype: "json",
                        cache: false,
                        async: false,

                        success: function (data) {
                             console.log(data);
                             if (data.success) {
                             showSuccessErrorMsg("success", "Success", "Updated Successfully!");
                             setTimeout(function () {
                                 location.reload();
                             }, 1000);
                             } else {

                             showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                             }

                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                         showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");
                        }
                    })

         }

      function showEditModal(ManufacturerId , Name ,IsActive , DisplaySeqNo ) {
             $('#ManufacturerIdUpdate').val(ManufacturerId);
              $('#NameUpdate').val(Name);


            if(IsActive!=undefined && IsActive=='True'){
                  $('#IsActiveUpdate').val('true');
            }else{
                  $('#IsActiveUpdate').val('false');
            }

              $('#DisplaySeqNoUpdate').val(DisplaySeqNo);


              $('#EditDataModal').modal('show');

     }

</script>

}
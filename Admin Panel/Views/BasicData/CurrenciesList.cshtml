@model Entities.MainModels.BasicDataModel

@{
    #region page basic info
    ViewData["Title"] = Model?.PageBasicInfoObj?.PageTitle ?? "";
    ViewData["EntityId"] = Model?.PageBasicInfoObj?.EntityId ?? 0;
     
    #endregion
}

@{
    List<SelectListItem> ActiveInactiveStatus = new List<SelectListItem>();
    ActiveInactiveStatus.Add(new SelectListItem { Value = "true", Text = "Active" });
    ActiveInactiveStatus.Add(new SelectListItem { Value = "false", Text = "In Active" });

    Dictionary<string, string>? IsActiveDropDown = new Dictionary<string, string>();
    IsActiveDropDown = ActiveInactiveStatus.ToDictionary(v => v.Value, t => t.Text);


}

<!-- Page header -->
@{
    PageHeader pageHeader = new PageHeader
            {
                EntityId = Model?.PageBasicInfoObj != null ? Model.PageBasicInfoObj.EntityId : 0,
                PageTitle = Model?.PageBasicInfoObj?.PageTitle ?? "Page Info",
                ShowAddNewButton = true,
                ShowActionsButton = true,
                ShowExportToPdfButton = false,
                ShowExportToExcelButton = true,
                DataExportUrl = Url.Action("CurrenciesList", "BasicData", new { langCode = Model?.PageBasicInfoObj?.langCode })
            };

}
@await Html.PartialAsync("~/Views/Common/_PageHeader.cshtml", pageHeader)
<!-- /page header -->



<div class="content">


    <!-- Error Area -->
    <div id="error-messages-area">
        @{
            SuccessErrorMsgEntity? successErrorMsgEntity = new SuccessErrorMsgEntity();
            successErrorMsgEntity = Model.SuccessErrorMsgEntityObj == null ? new SuccessErrorMsgEntity() : Model.SuccessErrorMsgEntityObj;
        }

        @await Html.PartialAsync("~/Views/Common/_SuccessErrorMsg.cshtml", successErrorMsgEntity)
    </div>
    <!-- /Error Area -->
    <!-- Search Area Starts Here -->
    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageSearchTitle.cshtml")
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <!-- Page search form -->
            @{
                SearchFilterModel filter = new SearchFilterModel();

                #region basic settings
                filter.SearchJSFunctionName = "SearchRecord();";
                filter.SearchButtonType = "button";
                filter.EntityId = Model?.PageBasicInfoObj?.EntityId ?? 0;
                filter.SearchURL = Url.Action("CurrenciesList", "BasicData", new { langCode = Model?.PageBasicInfoObj?.langCode });
                #endregion

                filter.SearchFilterEntityList = new List<HtmlFormFieldsEntity>()
            {
            new HtmlFormFieldsEntity(){ FieldID = "CurrencyId", FieldName="CurrencyId",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Currency Id", LabelText="Currency Id", ToolTipText="Enter here the Currency id", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "CurrencyName", FieldName="CurrencyName",  FieldTypeID = (short)HTMLFieldTypeEnums.Search, PlaceHolderText="Currency Name", LabelText="Currency Name", ToolTipText="Enter here currency name", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "FromDate", FieldName="FromDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="From Date", LabelText="From Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "ToDate", FieldName="ToDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="To Date", LabelText="To Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},

            };
            }

            @await Html.PartialAsync("~/Views/Common/_SearchFilter.cshtml", filter)
            <!-- /page search form -->


        </div>
    </div>
    <!-- Search Area Ends Here -->

    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageGridTitle.cshtml", Model?.PageBasicInfoObj)
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-lg-12 col-md-12">

                    <div class="table-responsive" id="main_data_table">
                        @await Html.PartialAsync("~/Views/BasicData/PartialViews/_CurrenciesList.cshtml", Model)
                    </div>

                </div>
            </div>


        </div>
    </div>

    <!-- Modals area Insert starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityInsert = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityInsert.ModalTitle = "Add Currency";
        htmlBootstrapModalEntityInsert.ModalDivId = "AddNewDataModal";
        htmlBootstrapModalEntityInsert.SubmitBtnJsFunctionName = "SaveFormRecord();";
        htmlBootstrapModalEntityInsert.SubmitButtonText = "Save";
        htmlBootstrapModalEntityInsert.FormId = "data-insert-common-form";
        htmlBootstrapModalEntityInsert.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;



        htmlBootstrapModalEntityInsert.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {
    new HtmlFormFieldsEntity(){ FieldID = "CurrencyNameInsert", FieldName="CurrencyNameInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Currency Name", LabelText="Currency Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "CurrencyCodeInsert", FieldName="CurrencyCodeInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Currency Code", LabelText="Currency Code" , IsRequired=true},
    new HtmlFormFieldsEntity(){ FieldID = "IsActiveInsert", FieldName="IsActiveInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select Status", LabelText="Is Active", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IsActiveDropDown},
    new HtmlFormFieldsEntity(){ FieldID = "DisplaySeqNoInsert", FieldName="DisplaySeqNoInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Display Seq No", LabelText="Display Seq No"},

    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityInsert)

    <!-- /Modals area Insert ends here-->
    <!-- Modals area Edit starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityEdit = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityEdit.ModalTitle = "Update Currency";
        htmlBootstrapModalEntityEdit.ModalDivId = "EditDataModal";
        htmlBootstrapModalEntityEdit.SubmitBtnJsFunctionName = "UpdateFormRecord();";
        htmlBootstrapModalEntityEdit.SubmitButtonText = "Update";
        htmlBootstrapModalEntityEdit.FormId = "data-edit-common-form";
        htmlBootstrapModalEntityEdit.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;


        htmlBootstrapModalEntityEdit.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {

    new HtmlFormFieldsEntity(){ FieldID = "CurrencyNameUpdate", FieldName="CurrencyNameUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Currency Name", LabelText="Currency Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "CurrencyCodeUpdate", FieldName="CurrencyCodeUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Currency Code", LabelText="Currency Code" , IsRequired=true},
    new HtmlFormFieldsEntity(){ FieldID = "IsActiveUpdate", FieldName="IsActiveUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select Status", LabelText="Is Active", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IsActiveDropDown},
    new HtmlFormFieldsEntity(){ FieldID = "DisplaySeqNoUpdate", FieldName="DisplaySeqNoUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Display Seq No", LabelText="Display Seq No"},

    new HtmlFormFieldsEntity(){ FieldID = "CurrencyIdUpdate", FieldName="CurrencyIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Hidden},

    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityEdit)

    <!-- /Modals area Edit ends here-->



</div>
@section  Scripts{

    <script>

        function SaveFormRecord() {

            $("#data-insert-common-form").submit(function(e) {
                e.preventDefault();
            });

            if (!$("#data-insert-common-form").valid()) {
                event.preventDefault();
                return false;
            }


            let CurrencyName = $('#CurrencyNameInsert').val();
            let CurrencyCode = $('#CurrencyCodeInsert').val();
            let IsActive = $('#IsActiveInsert').val();
            let DisplaySeqNo = $('#DisplaySeqNoInsert').val();



            if (!checkIfStringIsEmtpy(CurrencyName) || !checkIfStringIsEmtpy(CurrencyCode)) {
                showSuccessErrorMsg("error", "Error", "Please fill Currency Name and Currency Code fields!");
                return false;
            }

            if (!checkIfStringIsEmtpy(IsActive)) {
                showSuccessErrorMsg("error", "Error", "Please fill status field!");
                return false;
            }


            //--make form data
            var formDate = {
                CurrencyName: CurrencyName,
                CurrencyCode: CurrencyCode,
                IsActive: IsActive,
                DisplaySeqNo: DisplaySeqNo,
                DataOperationType: '@((short)DataOperationType.Insert)'
            }

            // ✅ Show loader area starts here
            showHideSiteMainLoader(true);
            // ✅ Show loader area ends here

            let saveUrl = "@Url.Action("SaveUpdateCurrency", "BasicData" , new { langCode = Model?.PageBasicInfoObj?.langCode })";
            $.ajax({
                type: "POST",
                url: saveUrl,
                data: formDate,
                // datatype: "json",
                cache: false,
                async: false,

                success: function(data) {
                    console.log(data);
                    if (data.success) {
                        showSuccessErrorMsg("success", "Success", "Saved Successfully!");
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {
                        showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                    }

                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here

                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");


                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here
                }
            })

        }

        function UpdateFormRecord() {

            $("#data-edit-common-form").submit(function(e) {
                e.preventDefault();
            });

            if (!$("#data-edit-common-form").valid()) {
                event.preventDefault();
                return false;
            }

            let CurrencyId = $('#CurrencyIdUpdate').val();
            let CurrencyName = $('#CurrencyNameUpdate').val();
            let CurrencyCode = $('#CurrencyCodeUpdate').val();
            let IsActive = $('#IsActiveUpdate').val();
            let DisplaySeqNo = $('#DisplaySeqNoUpdate').val();



            if (!checkIfStringIsEmtpy(CurrencyName) || !checkIfStringIsEmtpy(CurrencyCode)) {
                showSuccessErrorMsg("error", "Error", "Please fill Currency Name and Currency Code fields!");
                return false;
            }

            if (!checkIfStringIsEmtpy(IsActive)) {
                showSuccessErrorMsg("error", "Error", "Please fill status field!");
                return false;
            }

            if (!checkIfStringIsEmtpy(CurrencyId)) {
                showSuccessErrorMsg("error", "Error", "CurrencyId is null!");
                return false;
            }


            //--make form data
            var formDate = {
                CurrencyId: CurrencyId,
                CurrencyName: CurrencyName,
                CurrencyCode: CurrencyCode,
                IsActive: IsActive,
                DisplaySeqNo: DisplaySeqNo,
                DataOperationType: '@((short)DataOperationType.Update)'
            }

            // ✅ Show loader area starts here
            showHideSiteMainLoader(true);
            // ✅ Show loader area ends here

            let saveUrl = "@Url.Action("SaveUpdateCurrency", "BasicData" , new { langCode = Model?.PageBasicInfoObj?.langCode })";
            $.ajax({
                type: "POST",
                url: saveUrl,
                data: formDate,
                // datatype: "json",
                cache: false,
                async: false,

                success: function(data) {
                    console.log(data);
                    if (data.success) {
                        showSuccessErrorMsg("success", "Success", "Updated Successfully!");
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {

                        showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                    }

                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");

                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here
                }
            })

        }

        function showEditModal(CurrencyId, CurrencyName, CurrencyCode, IsActive, DisplaySeqNo) {


            //--first empty fields
            $('#CurrencyIdUpdate').val("");
            $('#CurrencyNameUpdate').val("");
            $('#CurrencyCodeUpdate').val("");

            $('#CurrencyIdUpdate').val(CurrencyId);
            $('#CurrencyNameUpdate').val(CurrencyName);
            $('#CurrencyCodeUpdate').val(CurrencyCode);

            if (IsActive != undefined && IsActive == 'True') {
                $('#IsActiveUpdate').val('true');
            } else {
                $('#IsActiveUpdate').val('false');
            }

            $('#DisplaySeqNoUpdate').val(DisplaySeqNo);


            $('#EditDataModal').modal('show');

        }

    </script>

}
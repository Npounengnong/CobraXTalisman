@model Entities.MainModels.AccountsModel

@{
    #region page basic info
    ViewData["Title"] = Model?.PageBasicInfoObj?.PageTitle ?? "";
    ViewData["EntityId"] = Model?.PageBasicInfoObj?.EntityId ?? 0;
     
    #endregion
}

@{
    List<SelectListItem> ActiveInactiveStatus = new List<SelectListItem>();
    ActiveInactiveStatus.Add(new SelectListItem { Value = "true", Text = "Active" });
    ActiveInactiveStatus.Add(new SelectListItem { Value = "false", Text = "In Active" });

    Dictionary<string, string>? IsActiveDropDown = new Dictionary<string, string>();
    IsActiveDropDown = ActiveInactiveStatus.ToDictionary(v => v.Value, t => t.Text);

    //--Countries Drop Down
    Dictionary<string, string>? CountriesListDic = new Dictionary<string, string>();
    CountriesListDic = Model != null && Model.CountriesList != null && Model.CountriesList.Count > 0 ?
    Model.CountriesList.ToDictionary(v => v.CountryId.ToString(), t => t.CountryName) : null;

    //--Industry type Drop Down
    Dictionary<string, string>? IndustryTypesDic = new Dictionary<string, string>();
    IndustryTypesDic = Model != null && Model.BankIndustryTypeList != null && Model.BankIndustryTypeList.Count > 0 ?
    Model.BankIndustryTypeList.ToDictionary(v => v.IndustryTypeId.ToString(), t => t.IndustryName) : null;

     //--Bank statuses Drop Down
    Dictionary<string, string>? BankStatusesDic = new Dictionary<string, string>();
    BankStatusesDic = Model != null && Model.BankStatusList != null && Model.BankStatusList.Count > 0 ?
    Model.BankStatusList.ToDictionary(v => v.BankStatusId.ToString(), t => t.StatusName) : null;
}

<!-- Page header -->
@{
    PageHeader pageHeader = new PageHeader
            {
                EntityId = Model?.PageBasicInfoObj!=null ? Model.PageBasicInfoObj.EntityId : 0,
                PageTitle = Model?.PageBasicInfoObj?.PageTitle ?? "Page Info",
                ShowAddNewButton = true,
                ShowActionsButton = true,
                ShowExportToPdfButton = false,
                ShowExportToExcelButton = true,
                DataExportUrl = Url.Action("Banks", "Accounts", new { langCode = Model?.PageBasicInfoObj?.langCode })
            };

}
@await Html.PartialAsync("~/Views/Common/_PageHeader.cshtml", pageHeader)
<!-- /page header -->



<div class="content">


    <!-- Error Area -->
    <div id="error-messages-area">
        @{
            SuccessErrorMsgEntity? successErrorMsgEntity = new SuccessErrorMsgEntity();
            successErrorMsgEntity = Model.SuccessErrorMsgEntityObj == null ? new SuccessErrorMsgEntity() : Model.SuccessErrorMsgEntityObj;
        }

        @await Html.PartialAsync("~/Views/Common/_SuccessErrorMsg.cshtml", successErrorMsgEntity)
    </div>
    <!-- /Error Area -->
    <!-- Search Area Starts Here -->
    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageSearchTitle.cshtml")
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <!-- Page search form -->
            @{
                SearchFilterModel filter = new SearchFilterModel();

                #region basic settings
                filter.SearchJSFunctionName = "SearchRecord();";
                filter.SearchButtonType = "button";
                filter.EntityId = Model?.PageBasicInfoObj?.EntityId ?? 0;
                filter.SearchURL = Url.Action("Banks", "Accounts", new { langCode = Model?.PageBasicInfoObj?.langCode });
                #endregion

                filter.SearchFilterEntityList = new List<HtmlFormFieldsEntity>()
            {
            new HtmlFormFieldsEntity(){ FieldID = "BankMasterID", FieldName="BankMasterID",  FieldTypeID = (short)HTMLFieldTypeEnums.Number, PlaceHolderText="Bank Id", LabelText="Bank Id", ToolTipText="Enter here the bank id", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "BankName", FieldName="BankName",  FieldTypeID = (short)HTMLFieldTypeEnums.Search, PlaceHolderText="Bank Name", LabelText="Bank Name", ToolTipText="Enter here bank name", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "FromDate", FieldName="FromDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="From Date", LabelText="From Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},
            new HtmlFormFieldsEntity(){ FieldID = "ToDate", FieldName="ToDate",  FieldTypeID = (short)HTMLFieldTypeEnums.Date, PlaceHolderText="To Date", LabelText="To Date", ToolTipText="Pick a date from where you want to search record", DropdownData=null},

            };
            }

            @await Html.PartialAsync("~/Views/Common/_SearchFilter.cshtml", filter)
            <!-- /page search form -->


        </div>
    </div>
    <!-- Search Area Ends Here -->
    <!-- Inverse colors -->
    <div class="card border-left-3 border-left-slate">
        <div class="card-header header-elements-inline">
            @await Html.PartialAsync("~/Views/Common/PartialViews/_PageGridTitle.cshtml", Model?.PageBasicInfoObj)
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-lg-12 col-md-12">

                    <div class="table-responsive" id="main_data_table">
                        @await Html.PartialAsync("~/Views/Accounts/PartialViews/_Banks.cshtml", Model)
                    </div>

                </div>
            </div>


        </div>
    </div>
    <!-- /inverse colors -->
    <!-- Modals area Insert starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityInsert = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityInsert.ModalTitle = "Add Bank";
        htmlBootstrapModalEntityInsert.ModalDivId = "AddNewDataModal";
        htmlBootstrapModalEntityInsert.SubmitBtnJsFunctionName = "SaveFormRecord();";
        htmlBootstrapModalEntityInsert.SubmitButtonText = "Save";
        htmlBootstrapModalEntityInsert.FormId = "data-insert-common-form";
        htmlBootstrapModalEntityInsert.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;



        htmlBootstrapModalEntityInsert.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {
    new HtmlFormFieldsEntity(){ FieldID = "BankNameInsert", FieldName="BankNameInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Bank Name", LabelText="Bank Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "BankCodeInsert", FieldName="BankCodeInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Bank Code", LabelText="Bank Code", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "SwiftCodeInsert", FieldName="SwiftCodeInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Swift Code", LabelText="Swift Code", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "WebUrlInsert", FieldName="WebUrlInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Website Url", LabelText="Website Url", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "IndustryTypeIdInsert", FieldName="IndustryTypeIdInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select industry", LabelText="Industry", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IndustryTypesDic},
    new HtmlFormFieldsEntity(){ FieldID = "BankStatusIdInsert", FieldName="BankStatusIdInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select bank status", LabelText="Bank Status", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=BankStatusesDic},
    new HtmlFormFieldsEntity(){ FieldID = "CountryIdInsert", FieldName="CountryIdInsert",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select country", LabelText="Country", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Select2 , DropdownData=CountriesListDic},


    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityInsert)

    <!-- /Modals area Insert ends here-->
    <!-- Modals area Edit starts here-->
    @{
        HtmlBootstrapModalEntity htmlBootstrapModalEntityEdit = new HtmlBootstrapModalEntity();

        htmlBootstrapModalEntityEdit.ModalTitle = "Update Bank";
        htmlBootstrapModalEntityEdit.ModalDivId = "EditDataModal";
        htmlBootstrapModalEntityEdit.SubmitBtnJsFunctionName = "UpdateFormRecord();";
        htmlBootstrapModalEntityEdit.SubmitButtonText = "Update";
        htmlBootstrapModalEntityEdit.FormId = "data-edit-common-form";
        htmlBootstrapModalEntityEdit.ModalSizeType = (short)HtmlBootsrapModalTypes.Medium;


        htmlBootstrapModalEntityEdit.htmlFormFieldsEntities = new List<HtmlFormFieldsEntity>()
    {
    new HtmlFormFieldsEntity(){ FieldID = "BankNameUpdate", FieldName="BankNameUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Bank Name", LabelText="Bank Name", IsRequired=true },
    new HtmlFormFieldsEntity(){ FieldID = "BankCodeUpdate", FieldName="BankCodeUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Bank Code", LabelText="Bank Code", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "SwiftCodeUpdate", FieldName="SwiftCodeUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Swift Code", LabelText="Swift Code", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "WebUrlUpdate", FieldName="WebUrlUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Text, PlaceHolderText="Website Url", LabelText="Website Url", IsRequired=false },
    new HtmlFormFieldsEntity(){ FieldID = "IndustryTypeIdUpdate", FieldName="IndustryTypeIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select industry", LabelText="Industry", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=IndustryTypesDic},
    new HtmlFormFieldsEntity(){ FieldID = "BankStatusIdUpdate", FieldName="BankStatusIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select bank status", LabelText="Bank Status", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Simple , DropdownData=BankStatusesDic},
    new HtmlFormFieldsEntity(){ FieldID = "CountryIdUpdate", FieldName="CountryIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Dropdown, PlaceHolderText="Select country", LabelText="Country", IsRequired=true,DropdownSelectType = (short)HtmlDropdownSelectType.Select2 , DropdownData=CountriesListDic},


    new HtmlFormFieldsEntity(){ FieldID = "BankMasterIdUpdate", FieldName="BankMasterIdUpdate",  FieldTypeID = (short)HTMLFieldTypeEnums.Hidden},

    };
    }

    @await Html.PartialAsync("~/Views/Common/_BootstrapFormModal.cshtml", htmlBootstrapModalEntityEdit)

    <!-- /Modals area Edit ends here-->



</div>
@section  Scripts{

    <script>


        function SaveFormRecord() {

            $("#data-insert-common-form").submit(function(e) {
                e.preventDefault();
            });

            if (!$("#data-insert-common-form").valid()) {
                event.preventDefault();
                return false;
            }

            let BankName = $('#BankNameInsert').val();
            let BankCode = $('#BankCodeInsert').val();
            let SwiftCode = $('#SwiftCodeInsert').val();
            let WebUrl = $('#WebUrlInsert').val();
            let IndustryTypeId = $('#IndustryTypeIdInsert').val();
            let BankStatusId = $('#BankStatusIdInsert').val();
            let CountryId = $('#CountryIdInsert').val();

            if (!checkIfStringIsEmtpy(BankName)) {
                showSuccessErrorMsg("error", "Error", "BankName field is required!");
                return false;
            }

           
            //--make form data
            var formDate = {
                BankName: BankName,
                BankCode: BankCode,
                SwiftCode: SwiftCode,
                WebUrl: WebUrl,
                IndustryTypeId: IndustryTypeId,
                BankStatusId: BankStatusId,
                CountryId: CountryId,
                DataOperationType: '@((short)DataOperationType.Insert)'
            }


            // ✅ Show loader area starts here
            showHideSiteMainLoader(true);
            // ✅ Show loader area ends here

            let saveUrl = "@Url.Action("SaveUpdateBank", "Accounts", new { langCode = Model?.PageBasicInfoObj?.langCode })";
            $.ajax({
                type: "POST",
                url: saveUrl,
                data: formDate,
                // datatype: "json",
                cache: false,
                async: false,

                success: function(data) {
                    console.log(data);
                    if (data.success) {
                        showSuccessErrorMsg("success", "Success", "Saved Successfully!");
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {
                        showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                    }


                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here

                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");


                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here
                }
            })

        }

        function UpdateFormRecord() {

            $("#data-edit-common-form").submit(function(e) {
                e.preventDefault();
            });

            if (!$("#data-edit-common-form").valid()) {
                event.preventDefault();
                return false;
            }

            let BankMasterId = $('#BankMasterIdUpdate').val();

            let BankName = $('#BankNameUpdate').val();
            let BankCode = $('#BankCodeUpdate').val();
            let SwiftCode = $('#SwiftCodeUpdate').val();
            let WebUrl = $('#WebUrlUpdate').val();
            let IndustryTypeId = $('#IndustryTypeIdUpdate').val();
            let BankStatusId = $('#BankStatusIdUpdate').val();
            let CountryId = $('#CountryIdUpdate').val();

            if (!checkIfStringIsEmtpy(BankName)) {
                showSuccessErrorMsg("error", "Error", "BankName field is required!");
                return false;
            }



            if (!checkIfStringIsEmtpy(BankMasterId)) {
                showSuccessErrorMsg("error", "Error", "Bank id is null!");
                return false;
            }


            //--make form data
            var formDate = {
                BankMasterId: BankMasterId,
                BankName: BankName,
                BankCode: BankCode,
                SwiftCode: SwiftCode,
                WebUrl: WebUrl,
                IndustryTypeId: IndustryTypeId,
                BankStatusId: BankStatusId,
                CountryId: CountryId,
                DataOperationType: '@((short)DataOperationType.Update)'
            }


            // ✅ Show loader area starts here
            showHideSiteMainLoader(true);
            // ✅ Show loader area ends here

            let saveUrl = "@Url.Action("SaveUpdateBank", "Accounts", new { langCode = Model?.PageBasicInfoObj?.langCode })";
            $.ajax({
                type: "POST",
                url: saveUrl,
                data: formDate,
                // datatype: "json",
                cache: false,
                async: false,

                success: function(data) {
                    console.log(data);
                    if (data.success) {
                        showSuccessErrorMsg("success", "Success", "Updated Successfully!");
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    } else {

                        showSuccessErrorMsg("error", "Error", data.message ?? "An error occured. Please try again!");
                    }


                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here

                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showSuccessErrorMsg("error", "Error", "An error occured. Please try again!");


                    // ✅ Stop loader area starts here
                    let LoaderTimeDuration = '@ConstantsHelper.SiteMainLoaderDuration()';
                    setTimeout(function() {
                        showHideSiteMainLoader(false);
                    }, LoaderTimeDuration ?? 2000);
                    // ✅ Stop loader area ends here
                }
            })

        }

      
        function showEditModal(BankMasterId, BankName, BankCode, SwiftCode, WebUrl, IndustryTypeId, BankStatusId, CountryId) {

            //--first empty old values
            $('#BankMasterIdUpdate').val("");
            $('#BankNameUpdate').val("");
            $('#BankCodeUpdate').val("");
            $('#SwiftCodeUpdate').val("");
            $('#WebUrlUpdate').val("");
            $('#IndustryTypeIdUpdate').val("");
            $('#BankStatusIdUpdate').val("");
            $("#CountryIdUpdate").val("").trigger("change");

            $('#BankMasterIdUpdate').val(BankMasterId);
            $('#BankNameUpdate').val(BankName);
            $('#BankCodeUpdate').val(BankCode);
            $('#SwiftCodeUpdate').val(SwiftCode);
            $('#WebUrlUpdate').val(WebUrl);
            $('#IndustryTypeIdUpdate').val(IndustryTypeId);
            $('#BankStatusIdUpdate').val(BankStatusId);

            //$("#ParentCategoryIdUpdate").select2("val", ParentCategoryId);
            $("#CountryIdUpdate").val(CountryId).trigger("change");
     


            $('#EditDataModal').modal('show');

        }




    </script>

}
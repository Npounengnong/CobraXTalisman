@model Entities.MainModels.NotificationsModel


@await Html.PartialAsync("~/Views/Common/_DataTableLength.cshtml")

<table class="table table-inbox">
    <thead>
        <tr>
            <th id="lbl_hdr_notiSelect"> Select</th>
            <th id="lbl_hdr_notiReadSts">  Read Status</th>
            <th id="lbl_hdr_notiTitle"> Title</th>
            <th id="lbl_hdr_notiMsg"> Message</th>
            <th id="lbl_hdr_notiReadBy"> Read By</th>
            <th id="lbl_hdr_notiType"> Type</th>
            <th id="lbl_hdr_notiDte"> Created On</th>


            <th class="text-center" style="width: 20px;"><i class="icon-arrow-down12"></i></th>
        </tr>
    </thead>

    <tbody data-link="row" class="rowlink different_admin_notifications">

        @{
            if (Model != null && Model.AdminPanelNotificationsList != null && Model.AdminPanelNotificationsList.Count > 0)
            {
                foreach (var item in Model.AdminPanelNotificationsList)
                {
                    string NotificationReadRowClass = item.IsRead == true ? "" : "unread";

                    <tr class="@NotificationReadRowClass">
                        <td class="">

                          <input class="notification_id" type="hidden" value="@item.NotificationId" />

                            <div class="form-check">
                                <label class="form-check-label">
                                    <input type="checkbox"  id="IsActive" name="IsActive" @(item.IsRead==true ? "disabled" : "" )  @(item.IsRead==true ? "checked" : "" )  class="form-check-input-styled-info is_notification_selected_for_read">

                                </label>
                            </div>
                        </td>

                        <td class="table-inbox-image">

                            @{
                                if (item.IsRead)
                                {
                                    <span class="btn bg-indigo-400 rounded-circle btn-icon btn-sm">
                                        <span class="letter-icon">R</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="btn bg-warning-400 rounded-circle btn-icon btn-sm">
                                        <span class="letter-icon">UR</span>
                                    </span>

                                }
                            }



                        </td>
                        <td class="table-inbox-name">
                            <a href="#!">
                                <div class="letter-icon-title text-default">@item.Title</div>
                            </a>
                        </td>
                        <td class="">
                            <span class="table-inbox-subject">@(StringConversionHelper.TruncateAnyStringValue(@item.Message , 60 , true))</span>

                        </td>
                        <td class="table-inbox-name">
                            <a href="#">
                                <div class="letter-icon-title text-default">@item.ReadByFirstName</div>
                            </a>
                        </td>

                        <td>
                            @{
                                if (!String.IsNullOrWhiteSpace(item.NotificationTypeName) && item.NotificationTypeName.Contains("order"))
                                {
                                    <span class="badge bg-indigo-400 mr-2">@item.NotificationTypeName</span>
                                }
                                else
                                {
                                    <span class="badge bg-pink-400 mr-2">@item.NotificationTypeName</span>
                                }
                            }

                        </td>

                        <td class="table-inbox-time">
                          @(item.CreatedOn.ToString("dd MMM, yyyy"))
                        </td>

                        <td class="text-center">
                            <div class="list-icons">
                                <div class="dropdown">
                                    <a href="#" class="list-icons-item" data-toggle="dropdown">
                                        <i class="icon-menu9"></i>
                                    </a>

                                    <div class="dropdown-menu dropdown-menu-right">


                                        @{
                                            ListingDeleteButton pageDeleteButton = new ListingDeleteButton
                    {
                        EntityId = Model?.PageBasicInfoObj?.EntityId ?? 0,
                        primaryKeyColumn = "NotificationID",
                        primarykeyValue = item.NotificationId.ToString(),
                        tableName = "AdminPanelNotifications",
                        SqlDeleteType = (short)SqlDeleteTypes.PlainTableDelete,
                    };
                                        }
                                        @await Html.PartialAsync("~/Views/Common/_ListingDeleteButton.cshtml", pageDeleteButton)


                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>

                }
            }
            //else
            //{
            //    <tr>
            //        <td class="text-center" colspan="20"><b>  No record found </b></td>

            //    </tr>
            //}
        }




    </tbody>
</table>



<div class="row" id="pagination_div">

    @{
        if (Model != null && Model.pageHelperObj != null)
        {
            PagerHelper ph = new PagerHelper();
            ph.CurrentPage = Model.pageHelperObj.CurrentPage;
            ph.TotalRecords = Model.pageHelperObj.TotalRecords;
            ph.RecordsPerPage = Model.pageHelperObj.RecordsPerPage;
            ph.EntityId = Model?.PageBasicInfoObj?.EntityId ?? 0;
            ph.PageUrl = Url.Action("AdminPanelNotificationsList", "Notifications", new { langCode = Model?.PageBasicInfoObj?.langCode });

            ph.AjaxEnabled = true;
            ph.OnClientClickAjaxCall = "PaginationAfterAjax(this)";

            @await Html.PartialAsync("~/Views/Common/_Pager.cshtml", ph)
        }

    }


</div>






